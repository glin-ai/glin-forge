name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true

jobs:
  build-binaries:
    name: Build ${{ matrix.platform.target }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      matrix:
        platform:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64

          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: linux-aarch64
            use-cross: true

          # macOS x86_64 (Intel)
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64

          # macOS ARM64 (Apple Silicon)
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64

          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install cross (if needed)
        if: matrix.platform.use-cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build binary
        run: |
          if [[ "${{ matrix.platform.use-cross }}" == "true" ]]; then
            cross build --release --target ${{ matrix.platform.target }}
          else
            cargo build --release --target ${{ matrix.platform.target }}
          fi
        shell: bash

      - name: Create tarball
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix
          BINARY_NAME="glin-forge"

          if [[ "${{ matrix.platform.target }}" == *"windows"* ]]; then
            BINARY_NAME="glin-forge.exe"
          fi

          cd target/${{ matrix.platform.target }}/release
          tar -czf glin-forge-${VERSION}-${{ matrix.platform.name }}.tar.gz ${BINARY_NAME}

          echo "TARBALL=glin-forge-${VERSION}-${{ matrix.platform.name }}.tar.gz" >> $GITHUB_ENV
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TARBALL }}
          path: target/${{ matrix.platform.target }}/release/${{ env.TARBALL }}

  create-release:
    name: Create GitHub Release
    needs: build-binaries
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: '*.tar.gz'
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          files: dist/*.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-npm:
    name: Publish npm packages
    needs: create-release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish @glin-ai/forge-sdk
        run: |
          cd packages/sdk
          npm install
          npm run build
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish @glin-ai/forge-testing
        run: |
          cd packages/testing
          npm install
          npm run build
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish glin-forge (CLI wrapper)
        run: |
          cd packages/cli
          npm install
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-cargo:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_TOKEN }}
