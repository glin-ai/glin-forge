// React hooks generation for ink! contracts

use anyhow::Result;
use serde_json::Value as JsonValue;

/// Generate React hooks for contract interaction
pub fn generate_react_hooks(contract_name: &str, _abi: &JsonValue) -> Result<String> {
    let hooks_output = format!(
        r#"// Generated by glin-forge
// Do not edit manually

import {{ useContract, useContractQuery, useContractTx }} from '@glin-ai/sdk-react';
import {{ type {}Contract }} from './{}';
import metadata from './metadata.json';

export function use{}(address: string, signer?: any) {{
  const {{ contract, loading, error }} = useContract({{
    address,
    abi: metadata,
    signer,
  }});

  return {{ contract: contract as {}Contract, loading, error }};
}}

export function use{}Query(address: string) {{
  const contract = use{}(address);

  // Helper hook for read-only queries
  const query = async (method: string, ...args: any[]) => {{
    if (!contract.contract) throw new Error('Contract not loaded');
    return contract.contract.query[method](...args);
  }};

  return {{ ...contract, query }};
}}

export function use{}Tx(address: string, signer: any) {{
  const contract = use{}(address, signer);

  // Helper hook for transactions
  const tx = async (method: string, ...args: any[]) => {{
    if (!contract.contract) throw new Error('Contract not loaded');
    if (!signer) throw new Error('Signer required for transactions');
    return contract.contract.tx[method](...args);
  }};

  return {{ ...contract, tx }};
}}
"#,
        contract_name,
        contract_name,
        contract_name,
        contract_name,
        contract_name,
        contract_name,
        contract_name,
        contract_name
    );

    Ok(hooks_output)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_generate_react_hooks() {
        let abi = serde_json::json!({});
        let result = generate_react_hooks("MyContract", &abi);
        assert!(result.is_ok());

        let hooks = result.unwrap();
        assert!(hooks.contains("useMyContract"));
        assert!(hooks.contains("useMyContractQuery"));
        assert!(hooks.contains("useMyContractTx"));
    }
}
