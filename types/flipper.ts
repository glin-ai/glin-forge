/**
 * TypeScript definitions for flipper contract
 *
 * Generated by glin-forge typegen
 * DO NOT EDIT MANUALLY
 */

import type {
  Contract,
  Transaction,
  Network,
  Signer,
  ContractEvent,
} from '@glin-forge/sdk';

// ========================================
// Custom Types
// ========================================

export type Result =
  { type: 'Ok', value: any }
| { type: 'Err', error: LangError }
;

// ========================================
// Constructors
// ========================================

export interface flipperConstructors {
  /**
   * Constructor that initializes the bool value to the given value.
   */
  new(
    init_value: boolean,
    options?: {
      value?: number | bigint;
      gasLimit?: number | bigint;
      salt?: string;
    }
  ): Promise<flipper>;

  /**
   * Constructor that initializes the bool value to false.
   */
  default(
    options?: {
      value?: number | bigint;
      gasLimit?: number | bigint;
      salt?: string;
    }
  ): Promise<flipper>;

}

// ========================================
// Contract Methods
// ========================================

export interface flipperQueries {
  /**
   * Returns the current value of the Flipper's boolean.
   */
  get(): Promise<Result>;

}

export interface flipperTransactions {
  /**
   * Flips the current value of the Flipper's boolean.
   */
  flip(): Promise<Transaction>;

}

// ========================================
// Events
// ========================================

/**
 * Emitted whenever the value is flipped.
 */
export interface FlippedEvent {
  old_value: boolean;
  new_value: boolean;
}

export interface flipperEvents {
  Flipped: FlippedEvent;
}

// ========================================
// Main Contract Interface
// ========================================

/**
 * Type-safe interface for the flipper contract
 */
export interface flipper {
  /** Contract address */
  address: string;

  /** Read-only query methods */
  query: flipperQueries;

  /** State-changing transaction methods */
  tx: flipperTransactions;

  /** Event types */
  events: flipperEvents;

  /** Contract metadata */
  metadata: string;
}
